#Если Не ВебКлиент Тогда

#Область ИНТЕРФЕЙС
	
&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем ОжидаемФормы;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;

&НаКлиенте
Перем массивТестовыхПриложений;

&НаКлиенте
Перем ЮнитТестированиеИмя;

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	ПолноеИмяБраузераТестов = КонтекстЯдра.Объект.ПолноеИмяБраузераТестов;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	ОжидаемФормы = КонтекстЯдра.Плагин("УтвержденияBDDForms");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ВерсияПриложения < "8.3.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	НаборТестов.Добавить("Тест_УтвержденияBDDForms");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ИмяПеременнойПользователь = "Пользователь12";
	ПользовательИмя = "ТестИмя12";
	ОбновитьПовторноИспользуемыеЗначения();
	
	КонтекстЯдра.ВывестиСообщение("Перед запуском теста");
	массивТестовыхПриложений = Новый Массив;
	
	//СоздатьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	КонтекстЯдра.ВывестиСообщение("После запуска теста");
	УдалитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
	
	ЗавершитьВсеСеансыРаботыСТестовымиПриложениями();
КонецПроцедуры

&НаСервере
Процедура СоздатьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	ГенераторТестовыхДанных = ГенераторТестовыхДанных();
	
	ИмяМакета = "СозданиеОдногоПользователяИБ";
	//ИмяМакета = "СозданиеОдногоПользователяИБ_УФ";
	
	ОсновнойОбъект = Объект();
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	КоллекцияПараметров = Новый Структура("ИмяПеременнойПользователь, ПользовательИмя", ИмяПеременнойПользователь, ПользовательИмя);
	НовыйТабДок = ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить(НовыйТабДок);
	
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	ТестовыеДанныеУФ.Очистить();

	ТестовыеДанныеДляУФ = Новый ТаблицаЗначений;
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить("Ключ");
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить("Значение");
	
	Для каждого ключЗначение Из ТестовыеДанные Цикл
		СписокВрем = Новый СписокЗначений;
		Строка = ТестовыеДанныеДляУФ.Добавить();
		Если ТипЗнч(ключЗначение.Значение) = Тип("ПользовательИнформационнойБазы") Тогда
			СписокВрем.Добавить(ключЗначение.Значение.Имя, ключЗначение.Ключ);
			Строка.Ключ = "ПользовательИнформационнойБазы";
		Иначе
			Строка.Ключ = ключЗначение.Ключ;
			СписокВрем.Добавить(ключЗначение.Значение);
		КонецЕсли;
		Строка.Значение = СписокВрем;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТестовыеДанныеДляУФ, ТестовыеДанныеУФ);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	Если ТестовыеДанныеУФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГенераторТестовыхДанных = ГенераторТестовыхДанных();
	
	//лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	//ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, "лПользователь должен существовать");
	
	ТестовыеДанные = Новый Структура;
	Для каждого Строка Из ТестовыеДанныеУФ Цикл
		Если Строка.Ключ = "ПользовательИнформационнойБазы" Тогда
			ЭлементСпискаЗначений = Строка.Значение[0];
			лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ЭлементСпискаЗначений.Значение));
			ТестовыеДанные.Вставить(ЭлементСпискаЗначений.Представление, лПользователь);
		Иначе
			ТестовыеДанные.Вставить(Строка.Ключ, Строка.Значение[0].Значение);
		КонецЕсли;
	КонецЦикла;
	
	ГенераторТестовыхДанных.УдалитьСозданныеДанные(ТестовыеДанные);
	
	//лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	//ЮТест.ПроверитьРавенство(лПользователь, Неопределено, "лПользователь должен быть удален");
	
	ТестовыеДанныеУФ.Очистить();
КонецПроцедуры

&НаСервере
Функция ГенераторТестовыхДанных()
	
	КонтекстЯдра = ПолучитьКонтекстЯдраНаСервере();
	
	СериализаторMXL = КонтекстЯдра.СоздатьОбъектПлагина("СериализаторMXL");	
	
	Возврат СериализаторMXL;
	
КонецФункции

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ПользовательИмя); //"ТестИмя");
	//Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

Функция ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров) Экспорт

	Макет = Объект().ПолучитьМакет(ИмяМакета);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, КоллекцияПараметров);
		//Если Не КоллекцияПараметров.Свойство("ИмяПользователя") Тогда
		//	Макет.Параметры.ИмяПользователя = ИмяНовогоПользователя;
		//КонецЕсли;
	
	НовыйТабДок = Новый ТабличныйДокумент;
	НовыйТабДок.Вывести(Макет);

	Возврат НовыйТабДок;
КонецФункции

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗапуститьТестовоеПриложение(ИмяПользователя, Пароль, Порт, ТаймаутОжиданияПриложенияВСекундах)
	Перем тестовоеПриложение;
	строкаЗапуска = ПолучитьСтрокуЗапуска(ИмяПользователя, Пароль, Порт);
	//Предупреждение("строкаЗапуска "+Символы.ПС+строкаЗапуска, 3);
	//Предупреждение("Порт "+Порт);
 	ЗапуститьПриложение(строкаЗапуска);
	тестовоеПриложение = Неопределено;
	Выполнить("тестовоеПриложение = Новый ТестируемоеПриложение(, XMLСтрока(Порт));");

	Подключен = Ложь;
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутОжиданияПриложенияВСекундах; //60;
	ОписаниеОшибкиСоединения = "";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			тестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

	сообщениеОшибки = "Не смогли установить соединение с тестовым приложением для пользователя "+ИмяПользователя+" !" + Символы.ПС + ОписаниеОшибкиСоединения; 
		//юТест.ПроверитьИстину(Подключен, сообщениеОшибки);
	Если Не Подключен Тогда 
    	тестовоеПриложение = Неопределено;
		ВызватьИсключение сообщениеОшибки;
	КонецЕсли;
	
	массивТестовыхПриложений.Добавить(тестовоеПриложение);

	Возврат тестовоеПриложение;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВсеСеансыРаботыСТестовымиПриложениями()
	Если массивТестовыхПриложений.Количество() <> 0 Тогда
		Для Каждого Подопытный Из массивТестовыхПриложений Цикл
			Подопытный.РазорватьСоединение();
		КонецЦикла;	

		ЗавершитьВсеТестовыеПриложенияПринудительно();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеТестовыеПриложенияПринудительно()
		Утверждения.ПроверитьЗаполненность(массивТестовыхПриложений.Количество(), "массивТестовыхПриложений.Количество()");

	Scr = Новый COMОбъект("MSScriptControl.ScriptControl");
	Scr.Language = "vbscript";
	Scr.AddCode("
		|Option Explicit
		|
		|Dim objWMIService, objProcess, colProcess
		|
		|Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"") 
		|
		|Set colProcess = objWMIService.ExecQuery(""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"")
		|
		|For Each objProcess in colProcess
		|	objProcess.Terminate()
		|Next
		|");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапуска(ИмяПользователя = "", Пароль = "", Порт = "")
		//Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		//	ИмяПользователя = "Администратор";
		//КонецЕсли;	
	
	Результат = КаталогПрограммы() + "1cv8c.exe ENTERPRISE " +
		"/IBConnectionString""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""") + """" +
		"/N""" + ИмяПользователя + """" + "/P""" + Пароль + """" +  
		" /TESTCLIENT -TPort" + XMLСтрока(Порт);

	Возврат Результат;
КонецФункции

// { Подсистема конфигурации xUnitFor1C

&НаСервере
Функция ПолучитьКонтекстЯдраНаСервере()
	
	// Получаем доступ к серверному контексту обработки с использованием 
	// полного имени метаданных браузера тестов. Иначе нет возможности получить
	// доступ к серверному контексту ядра, т.к. изначально вызов был выполнен на клиенте.
	// При передаче на сервер клиентский контекст теряется.
	КонтекстЯдра = Неопределено;
	МетаданныеЯдра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяБраузераТестов);
	Если НЕ МетаданныеЯдра = Неопределено
		И Метаданные.Обработки.Содержит(МетаданныеЯдра) Тогда
		ИмяОбработкиКонекстаЯдра = СтрЗаменить(ПолноеИмяБраузераТестов, "Обработка", "Обработки");
		Выполнить("КонтекстЯдра = " + ИмяОбработкиКонекстаЯдра + ".Создать()");	
	Иначе
		ИмяОбработкиКонекстаЯдра = СтрЗаменить(ПолноеИмяБраузераТестов, "ВнешняяОбработка", "ВнешниеОбработки");
		ИмяОбработкиКонекстаЯдра = СтрЗаменить(ИмяОбработкиКонекстаЯдра, ".", Символы.ПС);
		МенеджерОбъектов = СтрПолучитьСтроку(ИмяОбработкиКонекстаЯдра, 1);
		ИмяОбъекта = СтрПолучитьСтроку(ИмяОбработкиКонекстаЯдра, 2);
		Выполнить("КонтекстЯдра = " + МенеджерОбъектов + ".Создать("""+ИмяОбъекта+""")");	
	КонецЕсли;
	
	Возврат КонтекстЯдра;
	
КонецФункции

// } Подсистема конфигурации xUnitFor1C

#КонецОбласти

#Область РЕАЛИЗАЦИЯ
	
&НаКлиенте
Процедура Тест_УтвержденияBDDForms() Экспорт

	ОжидаемФормы.ПодключениеКлиентаТестирования("Администратор", "");
	
	ОжидаемФормы.ОтключениеКлиентаТестирования();
	
КонецПроцедуры

#КонецОбласти 


#КонецЕсли 


































